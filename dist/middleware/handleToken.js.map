{"version":3,"sources":["../../server/middleware/handleToken.js"],"names":["generateToken","user","jwt","sign","expiresIn","checkToken","req","res","next","header","headers","authorization","authFeedback","bearer","split","token","decoded","verify","tokenData","err"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAIC,yBAAIC,IAAJ,CAAS;AACnCF,IAAAA,IAAI,EAAJA;AADmC,GAAT,EAG5B,QAH4B,EAGlB;AAAEG,IAAAA,SAAS,EAAE;AAAb,GAHkB,CAAJ;AAAA,CAA1B;;;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,MAAI;AACA,QAAMC,MAAM,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAA3B;;AACA,QAAI,CAACF,MAAL,EAAa;AACT,aAAOG,sCAAaL,GAAb,EAAkB,GAAlB,SAA0B,CAAC,QAAD,EAAU,OAAV,EAAkB,MAAlB,EAAyB;AAAC,mBAAU;AAAX,OAAzB,CAA1B,EAAP;AACH;;AACD,QAAMM,MAAM,GAAGJ,MAAM,CAACK,KAAP,CAAa,GAAb,CAAf;AACA,QAAMC,KAAK,GAAGF,MAAM,CAAC,CAAD,CAApB;;AACA,QAAMG,OAAO,GAAGd,yBAAIe,MAAJ,CAAW;AACvBF,MAAAA,KAAK,EAALA;AADuB,KAAX,EAGd,QAHc,EAGJ;AAAEX,MAAAA,SAAS,EAAE;AAAb,KAHI,CAAhB;;AAIA,QAAI,CAACY,OAAL,EAAc;AACV,aAAOJ,sCAAaL,GAAb,EAAkB,GAAlB,SAA0B,CAAC,QAAD,EAAU,OAAV,EAAkB,MAAlB,EAAyB;AAAC,mBAAU;AAAX,OAAzB,CAA1B,EAAP;AACH;;AACDD,IAAAA,GAAG,CAACY,SAAJ,GAAgBF,OAAhB;AACA,WAAOR,IAAI,EAAX;AACH,GAhBD,CAgBE,OAAOW,GAAP,EAAY;AACV,WAAOP,sCAAaL,GAAb,EAAkB,GAAlB,SAA0B,CAAC,QAAD,EAAU,OAAV,EAAkB,MAAlB,EAAyB;AAAC,iBAAU;AAAX,KAAzB,CAA1B,EAAP;AACH;AACJ,CApBD","sourcesContent":["import jwt from 'jsonwebtoken';\nimport 'dotenv/config';\nimport { authFeedback } from '../helpers/Feedback';\n\nconst generateToken = user => jwt.sign({\n    user,\n  },\n  'secret', { expiresIn: '7d' });\nconst checkToken = (req, res, next) => {\n    try {\n        const header = req.headers.authorization;\n        if (!header) {\n            return authFeedback(res, 403, ...['status','error','data',{'message':'Token must be provided'}]);\n        }\n        const bearer = header.split(' ');\n        const token = bearer[1];\n        const decoded = jwt.verify({\n            token,\n          },\n          'secret', { expiresIn: '7d' });\n        if (!decoded) {\n            return authFeedback(res, 403, ...['status','error','data',{'message':'Unable to authenticate token'}]);\n        }\n        req.tokenData = decoded;\n        return next();\n    } catch (err) {\n        return authFeedback(res, 403, ...['status','error','data',{'message':'Authentication failed'}]);\n    }\n};\n\n\nexport { generateToken, checkToken };"],"file":"handleToken.js"}