{"version":3,"sources":["../../server/controllers/user.js"],"names":["User","signUp","req","res","body","first_name","last_name","email","password","address","phoneNumber","status","send","allUserList","UserModel","AllUsers","Index","findIndex","u","serverFeedback","json","data","login","displayUser","find","decryptedPassword","Authentication","comparePassword","id","token","loggedIn","err"],"mappings":"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","sourcesContent":["import UserModel from '../models/user';\nimport { serverFeedback, userFeedback, findError } from '../helpers/Feedback';\nimport Authentication from '../helpers/auth';\nimport { generateToken } from '../middleware/handleToken';\nconst User = {\n\n  signUp(req, res) {\n    if (!req.body.first_name && !req.body.last_name && !req.body.email && !req.body.password && !req.body.address && !req.body.phoneNumber) {\n      return res.status(400).send({ 'message': 'Please Fill all fields' })\n    }\n    const allUserList = UserModel.AllUsers();\n    const Index = allUserList.findIndex(u => u.email === req.body.email);\n    if (Index >= 0){\n      return serverFeedback(res, 403, ...['status', 'error', 'data', { 'message': 'User already exist'}]);\n    }\n    const User = UserModel.signUp(req.body);\n    return res.status(201).json({\n      status: \"success\",\n      data: User\n    }\n    );\n  },\n  login(req, res) {\n    try {\n      const { password, email } = req.body;\n      const allUserList = UserModel.AllUsers();\n      const displayUser = allUserList.find(u => u.email === email);\n      if (!displayUser) {\n        return serverFeedback(res, 403, ...['status', 'error', 'data',{ 'message': 'Invalid email'}]);\n      }\n\n      const decryptedPassword = Authentication.comparePassword(displayUser.password,password);\n      if (!decryptedPassword) {\n        return serverFeedback(res, 422, ...['status', 'error', 'data', { 'message': 'Incorrect Password'}]);\n      }\n      const {\n        id, phoneNumber, first_name, last_name\n      } = displayUser;\n      const token = generateToken({ id, email, phoneNumber });\n      const loggedIn = {\n        id, token, first_name, last_name, email\n      };\n      return userFeedback(res, 200, loggedIn);\n    } catch (err) {\n      return findError(res);\n    }\n  }\n}\n\nexport default User;"],"file":"user.js"}